##### ideas
input s
botão voltar
syntax highl

    .hljs-literal {
      color: #990073;
    }
    .hljs-number {
      color: #099;
    }
    .hljs-comment {
      color: #998;
        font-style: italic;
    }
    .hljs-keyword {
      color: #900;
        font-weight: bold;
    }
    .hljs-string {
      color: #d14;
    }

##### sets antigos


{
  questions <- list(get_questions(i1))
  
  sizes <- lapply(questions, length)
  
  sections <- list(c("Vetores atômicos", "Vetores genéricos"))
  #sapply(sections[[s]], `[[` ,1)
  
  recaps <- list('<p>aprendemos x e y</p>')
  descriptions <- list('<p>Lista da aula 1, cujo tema foi ...</p>')
  
  nsets <- length(questions)
  
  sets <- purrr::pmap(list(questions, sections, recaps, descriptions, sizes),
                      ~ list(questions = questions[[1]],
                             sections = sections[[1]],
                             size = sizes[[1]],
                             recap = recaps[[1]],
                             description = descriptions[[1]],
                             answers_text = rep("Sem resposta", sizes[[1]]),
                             answers_code = rep("'Sem resposta'", sizes[[1]]),
                             answers_img = character(sizes[[1]]))) %>%
    setNames(paste0("set", 1:nsets))
}



#########
 observeEvent(input$toggleAllButton, {
    if (input$toggleAllButton %% 2 == 1) {
      mode <- list(div = 1, lab = "Esconder") 
      output$toggleAll <- renderText({ "Esconder tudo" })
    } else {
      mode <- list(div = 0, lab = "Mostrar")
      output$toggleAll <- renderText({ "Mostrar tudo" })
    }
    for (i in 1:size) {
      if (input[[glue("toggle{i}")]] %% 2 == mode$div) {
        updateActionButton(session, glue("toggle{i}"), label = glue("{mode$lab} Q{i}"))
      }
    }
  })

################### BEFORE TABSETS

###################
for (i in 1:size) {
    observeEvent(input[[glue("img_{i}")]], {
      sets[[s]]$answers_img[i] <<- build_img(input, output, s, i)
    })
    
    observeEvent(input[[glue("button_{i}")]], {
      output$test <- renderUI({ p("foi porra") })
      sets[[s]]$answers_text[i] <<- input[[glue("text_{i}")]]
      output[[glue("text_{i}")]] <<- renderText({ sets[[s]]$answers_text[i] })
      
      sets[[s]]$answers_code[i] <<- input[[glue("code_{i}")]]
      output[[glue("code_{i}")]] <<- renderText({ sets[[s]]$answers_code[i] })
    })
  }
  
observeEvent(lapply(1:size, \(i) input[[glue("img_{i}")]]), {
    for (i in 1:size) {
      sets[[s]]$answers_img[i] <<- build_img(input, output, s, i)
    }
  })
  
  observeEvent(lapply(1:size, \(i) input[[glue("button_{i}")]]), {
    for (i in 1:size) {
      sets[[s]]$answers_text[i] <<- input[[glue("text_{i}")]]
      output[[glue("text_{i}")]] <<- renderText({ sets[[s]]$answers_text[i] })
      sets[[s]]$answers_code[i] <<- input[[glue("code_{i}")]]
      output[[glue("code_{i}")]] <<- renderText({ sets[[s]]$answers_code[i] })
    }
  })



build_update_exprs <- function(size){
  expr_img <- lapply(as.double(1:size), \(i){
    expr({
      observeEvent(input[[paste("img_", !!i)]], {
        sets[[s]]$answers_img[!!i] <<- build_img(input, output, s, !!i)
      })
    })
  })
  
  expr_textcode <- lapply(as.double(1:size), \(i){
    rlang::expr({
      observeEvent(input[[paste("button_", !!i)]], {
        sets[[s]]$answers_text[!!i] <<- input[[paste0("text_", !!i)]]; output[[paste0("text_", !!i)]] <<- renderText({sets[[s]]$answers_text[!!i]})
        sets[[s]]$answers_code[!!i] <<- input[[paste0("code_", !!i)]]; output[[paste0("code_", !!i)]] <<- renderText({ sets[[s]]$answers_code[!!i]})
      })
    })
  })
  
  return(c(expr_img, expr_textcode))
}

  #update_exprs <- build_update_exprs(size)
  #for (uexpr in update_exprs) tidy_eval(uexpr)